package jp.ac.osaka_u.ist.sel.metricstool.main.data.target.unresolved;


import java.util.Set;

import jp.ac.osaka_u.ist.sel.metricstool.main.data.target.ArrayTypeInfo;
import jp.ac.osaka_u.ist.sel.metricstool.main.data.target.CallableUnitInfo;
import jp.ac.osaka_u.ist.sel.metricstool.main.data.target.ClassInfoManager;
import jp.ac.osaka_u.ist.sel.metricstool.main.data.target.FieldInfoManager;
import jp.ac.osaka_u.ist.sel.metricstool.main.data.target.MethodInfoManager;
import jp.ac.osaka_u.ist.sel.metricstool.main.data.target.ModifierInfo;
import jp.ac.osaka_u.ist.sel.metricstool.main.data.target.TargetClassInfo;
import jp.ac.osaka_u.ist.sel.metricstool.main.data.target.TargetParameterInfo;
import jp.ac.osaka_u.ist.sel.metricstool.main.data.target.TargetVariableLengthParameterInfo;
import jp.ac.osaka_u.ist.sel.metricstool.main.data.target.TypeInfo;
import jp.ac.osaka_u.ist.sel.metricstool.main.data.target.VariableLengthParameterInfo;
import jp.ac.osaka_u.ist.sel.metricstool.main.security.MetricsToolSecurityManager;


public class UnresolvedVariableLengthParameterInfo extends UnresolvedParameterInfo implements
        VariableLengthParameterInfo {

    /**
     * 引数オブジェクトを初期化する．名前と型が必要．
     * 
     * @param name 引数名
     * @param type 引数の型
     * @param index 何番目の引数でるかを表す
     * @param definitionMethod 引数を宣言しているメソッド
     * @param fromLine 開始行
     * @param fromColumn 開始列
     * @param toLine 終了行
     * @param toColumn 終了列
     */
    public UnresolvedVariableLengthParameterInfo(final String name,
            final UnresolvedTypeInfo<?> type, final int index,
            final UnresolvedCallableUnitInfo<? extends CallableUnitInfo> definitionMethod,
            final int fromLine, final int fromColumn, final int toLine, final int toColumn) {
        super(name, UnresolvedArrayTypeInfo.getType(type, 1), index, definitionMethod, fromLine,
                fromColumn, toLine, toColumn);
    }

    /**
     * 未解決引数情報を解決し，解決済み参照を返す．
     * 
     * @param usingClass 未解決引数情報の定義が行われているクラス
     * @param usingMethod 未解決引数情報の定義が行われているメソッド
     * @param classInfoManager 用いるクラスマネージャ
     * @param fieldInfoManager 用いるフィールドマネージャ
     * @param methodInfoManager 用いるメソッドマネージャ
     * @return 解決済み引数情報
     */
    @Override
    public TargetParameterInfo resolve(final TargetClassInfo usingClass,
            final CallableUnitInfo usingMethod, final ClassInfoManager classInfoManager,
            final FieldInfoManager fieldInfoManager, final MethodInfoManager methodInfoManager) {

        // 不正な呼び出しでないかをチェック
        MetricsToolSecurityManager.getInstance().checkAccess();
        if (null == classInfoManager) {
            throw new NullPointerException();
        }

        // 既に解決済みである場合は，キャッシュを返す
        if (this.alreadyResolved()) {
            return this.getResolved();
        }

        final TargetParameterInfo resolvedParameter = super.resolve(null, null, classInfoManager,
                fieldInfoManager, methodInfoManager);

        final Set<ModifierInfo> modifiers = resolvedParameter.getModifiers();
        final String name = resolvedParameter.getName();
        final TypeInfo type = ((ArrayTypeInfo) resolvedParameter.getType()).getElementType();
        final int index = resolvedParameter.getIndex();
        final CallableUnitInfo definitionUnit = resolvedParameter.getDefinitionUnit();
        final int fromLine = resolvedParameter.getFromLine();
        final int fromColumn = resolvedParameter.getFromColumn();
        final int toLine = resolvedParameter.getToLine();
        final int toColumn = resolvedParameter.getToColumn();

        this.resolvedInfo = new TargetVariableLengthParameterInfo(modifiers, name, type, index,
                definitionUnit, fromLine, fromColumn, toLine, toColumn);
        return this.resolvedInfo;
    }
}
